// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
 
model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  List List[]
}
 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([userId, credentialID])
}

model List {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  userId    String   @db.ObjectId
  productIds String[] @db.ObjectId
  products  Product[] @relation(fields: [productIds], references: [id])

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  asin            String    @unique
  title           String
  brand           String
  stars           Float?
  reviewsCount    Int?
  thumbnailImage  String?
  breadCrumbs     String?
  description     String?
  
  // Price history instead of single price
  priceHistory    ProductPrice[]
  
  // Optional current price for quick reference
  currentPrice    Float?
  currentCurrency String?
  
  url             String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  lists           List[]    @relation(fields: [listIds], references: [id])
  listIds         String[]  @db.ObjectId
}

// New model to track price history
model ProductPrice {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  productId      String    @db.ObjectId
  price          Float
  currency       String
  dateScrapped   DateTime  @default(now())
  
  // Optional additional metadata about the price
  source         String?   // Where the price was scraped from
  isLowest       Boolean?  // Was this the lowest recorded price?
  
  product        Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@index([productId])
  @@index([dateScrapped])
}